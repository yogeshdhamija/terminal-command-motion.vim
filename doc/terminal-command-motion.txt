*terminal-command-motion.txt*

Author: Yogesh Dhamija <yogeshdhamija.github.io>

`terminal-command-motion.vim` will add a new motion that can be used in a terminal buffer in 
normal mode. The motion is `cm`, short for (C)o(m)mand. So, you can:

- `yicm`: (Y)ank (I)nner (C)o(m)mand
- `2cm`: move forward (2) (C)o(m)mands
- `5CM`: move backward (5) (C)o(m)mands

...etc.

                                            *acm* *icm*
These mappings can be used like:
- `yicm`: (Y)ank (I)nner (C)o(m)mand in a terminal buffer
- `vacm`: (V)isual select (A)ll of a (C)o(m)mand in a terminal buffer

        Key Mapping       Description     ~
>
        acm               (A)ll (C)o(m)mand 
                                includes the prompt and the command output
        icm               (I)nner (C)o(m)mand 
                                if the cursor is on the line with the prompt,
                                    includes only the prompt line
                                otherwise,
                                    includes only the command output
<

                                            *cm* 
`<count>cm`: Move forward by that many terminal commands
in a terminal buffer

                                            *CM* 
`<count>CM`: Move backward by that many terminal commands
in a terminal buffer

                                            *g:terminal_command_motion_prompt_matcher*
Put this in your vimrc. It acts as the `/` command that will be used to find your terminal
prompt, to differentiate each command from the next.
Example:
>
    let g:terminal_command_motion_prompt_matcher = '^'.$USER.' in .* \%'
<

It uses standard vim regex, so you can use `\v` or `\V` or `\c` or whatever.
